# -*- mode: ruby -*-
# vi: set ft=ruby :
#
Vagrant.require_version ">= 1.6.0"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.


boxes = [
    {
        :name => "k8s-master",
        :eth1 => "192.168.205.10",
        :mem => "2048",
        :cpu => "1"
    },
    {
        :name => "k8s-worker1",
        :eth1 => "192.168.205.11",
        :mem => "2048",
        :cpu => "1"
    },
    {
        :name => "k8s-worker2",
        :eth1 => "192.168.205.12",
        :mem => "2048",
        :cpu => "1"
    }
]

Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/xenial64"

  boxes.each do |opts|
      config.vm.define opts[:name] do |config|
        config.vm.hostname = opts[:name]

        config.vm.provider "vmware_fusion" do |v|
          v.vmx["memsize"] = opts[:mem]
          v.vmx["numvcpus"] = opts[:cpu]
        end

        config.vm.provider "virtualbox" do |v|
          v.customize ["modifyvm", :id, "--memory", opts[:mem]]
          v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]
        end

        config.vm.network :private_network, ip: opts[:eth1]
      end
  end

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo sed -i 's/archive.ubuntu.com/ftp.daumkakao.com/g' /etc/apt/sources.list
    sudo apt-get update
    # Install docker if you don't have it already.
    sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    sudo apt-get update
    sudo apt-get install -y docker-ce bridge-utils
    echo "DEFAULT_FORWARD_POLICY=\"ACCEPT\"" | sudo tee -a /etc/default/ufw
    sudo ufw reload
    curl -L https://github.com/coreos/etcd/releases/download/v3.2.1/etcd-v3.2.1-linux-amd64.tar.gz -o etcd.tgz
    curl -L https://github.com/coreos/flannel/releases/download/v0.7.1/flannel-v0.7.1-linux-amd64.tar.gz -o flannel.tgz
    curl -L https://github.com/kubernetes/kubernetes/releases/download/v1.6.7/kubernetes.tar.gz -o k8s.tgz
    wget https://storage.googleapis.com/kubernetes-release/release/v1.6.7/bin/linux/amd64/kube-apiserver
    wget https://storage.googleapis.com/kubernetes-release/release/v1.6.7/bin/linux/amd64/kube-controller-manager
    wget https://storage.googleapis.com/kubernetes-release/release/v1.6.7/bin/linux/amd64/kube-scheduler
    wget https://storage.googleapis.com/kubernetes-release/release/v1.6.7/bin/linux/amd64/kubelet
    wget https://storage.googleapis.com/kubernetes-release/release/v1.6.7/bin/linux/amd64/kubectl
    wget https://storage.googleapis.com/kubernetes-release/release/v1.6.7/bin/linux/amd64/kube-proxy
    wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/saltbase/salt/etcd/etcd.manifest
    wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/saltbase/salt/etcd/init.sls
  SHELL
end
