---
apiVersion: batch/v1
kind: Job
metadata:
  name: enroll-admin
  namespace: orderer
spec:
  template:
    spec:
      containers:
      - name: enroll-admin
        image: alpine:latest
        command: ["sh","-c"]
        args:
        - |
          mkdir -p /var/wallet &&
          cd /var/wallet &&
          echo "Install required packages"
          apk add --no-cache curl openssl jq > /dev/null || exit 1
          
          echo "Get admin's key pair"
          openssl ecparam -name prime256v1 -genkey -noout -out my.key 
          cat > openssl.cnf <<EOF
          [ req ]
          default_bits        = 256
          default_md          = sha256
          default_keyfile     = my.key
          distinguished_name  = req_dn
          [ req_dn ]
          countryName         = KR
          EOF
          echo "Generate admin's CSR"
          openssl req -new -sha256 -key my.key -out my.csr -config ./openssl.cnf -subj "/C=KR/ST=Seoul/L=Gangdong-gu/O=orderer.com/OU=admin/CN=admin"
          CSR=$(cat my.csr | tr '\n' '_' | sed 's/\_/\\n/g')
          until nslookup ${FABRIC_CA_SERVER} > /dev/null
          do
            echo "Failed to resolve CA server: ${FABRIC_CA_SERVER}"
            sleep 30
          done
          echo "Get admin's certificate"
          curl -o cert.out -X POST --user admin:adminpw -H "Content-Type: application/json" http://${FABRIC_CA_SERVER}:7054/api/v1/enroll -d '{"certificate_request":"'"${CSR::-2}"'"}' || exit 1
          echo "Save admin's MSP data into secret"
          ADMIN_CERT=$(jq -r '.result.Cert' cert.out)
          ADMIN_KEY=$(base64 my.key | tr -d '\n')
          CA_CERT=$(jq -r '.result.ServerInfo.CAChain' cert.out)
          IPK=$(jq -r '.result.ServerInfo.IssuerPublicKey' cert.out | base64 | tr -d '\n')
          IRPK=$(jq -r '.result.ServerInfo.IssuerRevocationPublicKey' cert.out)
          SECRET=$(echo '{"metadata":{"name":"admin"},"type":"Opaque"}' | \
              jq -r --arg a ${ADMIN_CERT} --arg b ${ADMIN_KEY} --arg c ${CA_CERT} --arg d ${IPK} --arg e ${IRPK} \
                  '.data.cert = $a | .data.key = $b | .data.CA = $c | .data.IssuerPublicKey = $d | .data.IssuerRevocationPublicKey = $e | .data.user = ""')
          echo "Register certificates as Secret" 
          KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) 
          NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace) 
          curl -X POST --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt -H "Authorization: Bearer $KUBE_TOKEN" -H "Content-Type: application/json" -d ${SECRET} https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/${NAMESPACE}/secrets || exit 1
        env:
        - name: FABRIC_CA_SERVER
          value: ca.orderer
      serviceAccountName: orderer-admin
      restartPolicy: OnFailure