---
apiVersion: v1
kind: ConfigMap
metadata:
  name: configtx
  namespace: default
data:
  configtx.yaml: |
    Organizations:
    - &Org1
      Name: Org1
      ID: Org1MSP
      MSPDir: org1
      Policies:
        Readers:
          Type: Signature
          Rule: "OR('Org1.member')"
        Writers:
          Type: Signature
          Rule: "OR('Org1.member')"
        Admins:
          Type: Signature
          Rule: "OR('Org1.admin')"
      AnchorPeers:
      - Host: peer-0.peer.org1
        Port: 7051
    - &Org2
      Name: Org2
      ID: Org2MSP
      MSPDir: org2
      Policies:
        Readers:
          Type: Signature
          Rule: "OR('Org2.member')"
        Writers:
          Type: Signature
          Rule: "OR('Org2.member')"
        Admins:
          Type: Signature
          Rule: "OR('Org2.admin')"
      AnchorPeers:
      - Host: peer-0.peer.org2
        Port: 7051
    - &Orderer
      Name: Orderer
      ID: OrdererMSP
      MSPDir: orderer
      Policies:
        Readers:
          Type: Signature
          Rule: "OR('Orderer.member')"
        Writers:
          Type: Signature
          Rule: "OR('Orderer.member')"
        Admins:
          Type: Signature
          Rule: "OR('Orderer.member')"
    Orderer: &OrdererDefaults
      OrdererType: solo
      Addresses:
      - orderer-0.orderer.orderer:7050
      BatchTimeout: 2s
      BatchSize:
        MaxMessageCount: 10
        AbsoluteMaxBytes: 99 MB
        PreferredMaxBytes: 512 KB
      Kafka:
      Organizations:
      Policies:
        Readers:
          Type: ImplicitMeta
          Rule: "ANY Readers"
        Writers:
          Type: ImplicitMeta
          Rule: "ANY Writers"
        Admins:
          Type: ImplicitMeta
          Rule: "ALL Admins"
        BlockValidation:
          Type: ImplicitMeta
          Rule: "ANY Writers"
    Profiles:
      GenesisProfile:
        Policies:
          Readers:
            Type: ImplicitMeta
            Rule: "ANY Readers"
          Writers:
            Type: ImplicitMeta
            Rule: "ANY Writers"
          Admins:
            Type: ImplicitMeta
            Rule: "ALL Admins"
        Capabilities:
          V1_3: true
        Orderer:
          <<: *OrdererDefaults
          Organizations:
          - *Orderer
          Capabilities:
            V1_1: true
        Consortiums:
          SampleConsortium:
            Organizations:
            - *Org1
            - *Org2
---
apiVersion: batch/v1
kind: Job
metadata:
  name: genesis-block
  namespace: default
  labels:
    app: hyperledger-fabric
    component: genesis-block
spec:
  template:
    spec:
      containers:
      - name: generate-genesis
        image: hyperledger/fabric-tools:1.4.1
        command: ["sh","-c"]
        args:
        - |
          # Download hyperledger-fabric binaries
          # Get MSP for org1
          # Get MSP for org2
          # Get MSP for orderer
          # Generate genesis.block
          # Save genesis.block to Secret

          KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) 
          for ORG in org1 org2 orderer
          do
            echo "##### 1. Start - Get ${ORG}'s MSP data #####"
            curl -o ${ORG}.json \
              --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
              -H "Authorization: Bearer $KUBE_TOKEN" \
              https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/${ORG}/secrets/msp || exit 1
            mkdir -p /root/${ORG}/admincerts /root/${ORG}/cacerts
            jq -r '.data.admincert' > /root/${ORG}/admincerts/admin.pem
            jq -r '.data.cacert' > /root/${ORG}/cacerts/ca.pem
            echo "##### 1. Finish - Get ${ORG}'s MSP data #####"
          done

          echo "##### 2. Start - Generate genesis.block #####"
          wget -O /root/install.sh ${BINARY_URL} || exit 1
          cd /root
          bash ./install.sh -d -s || exit 1
          /root/bin/configtxgen -configPath $PWD -profile GenesisProfile -channelID syschannel -outputBlock genesis.block
          echo "##### 2. Finish - Generate genesis.block #####"

          echo "##### 3. Start - Save genesis.block as Secret #####"
          GENESIS_BLOCK=$(base64 genesis.block)
          SECRET=$(echo '{"metadata":{"name":"genesis"},"type":"Opaque"}' | \
            jq -r --arg a ${GENESIS_BLOCK} '.data."genesis.block" = $a')
          curl -X POST \
            --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            -H "Authorization: Bearer $KUBE_TOKEN" \
            -H "Content-Type: application/json" \
            -d "${SECRET}" \
            https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/orderer/secrets || exit 1
          echo "##### 3. Finish - Save genesis.block as Secret #####"
        env:
        - name: BINARY_URL
          value: http://bit.ly/2ysbOFE
        volumeMounts:
        - name: configtx
          mountPath: /root/configtx.yaml
          subPath: configtx.yaml
      volumes:
      - name: configtx
        configMap:
          name: configtx
      serviceAccountName: genesis-admin
      restartPolicy: OnFailure